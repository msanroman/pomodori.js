// Generated by CoffeeScript 1.3.1
(function() {

  describe('Task', function() {
    beforeEach(function() {
      return this.task = new PomoJS.Models.Task;
    });
    it("should exist", function() {
      return expect(PomoJS.Models.Task).toBeDefined();
    });
    describe("default values for new tasks", function() {
      it("should have an empty string as default name", function() {
        return expect(this.task.get("name")).toEqual("");
      });
      it("shouldn't be completed", function() {
        return expect(this.task.get("completed")).toEqual(false);
      });
      return it("should have no pomodoros assigned as default estimation", function() {
        return expect(this.task.get("estimation")).toEqual(0);
      });
    });
    describe("getters", function() {
      describe("getId", function() {
        it("should be defined", function() {
          return expect(this.task.getId).toBeDefined();
        });
        return it("should return model's id", function() {
          var stub;
          stub = sinon.stub(this.task, 'get').returns(1);
          expect(this.task.getId()).toEqual(1);
          return expect(stub.calledWith('id')).toBeTruthy();
        });
      });
      describe("getName", function() {
        it("should be defined", function() {
          return expect(this.task.getName).toBeDefined();
        });
        return it("should return its name", function() {
          spyOn(this.task, 'get').andReturn('Trololo!');
          expect(this.task.getName()).toEqual('Trololo!');
          return expect(this.task.get).toHaveBeenCalledWith('name');
        });
      });
      describe("isCompleted", function() {
        it("should be defined", function() {
          return expect(this.task.isCompleted).toBeDefined();
        });
        return it("should return value for the completed attribute", function() {
          spyOn(this.task, 'get').andReturn(false);
          expect(this.task.isCompleted()).toEqual(false);
          return expect(this.task.get).toHaveBeenCalledWith('completed');
        });
      });
      return describe("getEstimation", function() {
        it("should be defined", function() {
          return expect(this.task.getEstimation).toBeDefined();
        });
        return it("should return its estimation", function() {
          spyOn(this.task, 'get').andReturn(5);
          expect(this.task.getEstimation()).toEqual(5);
          return expect(this.task.get).toHaveBeenCalledWith("estimation");
        });
      });
    });
    return describe("save", function() {
      beforeEach(function() {
        return this.server = sinon.fakeServer.create();
      });
      afterEach(function() {
        return this.server.restore();
      });
      it('sends valid data to the server', function() {
        var params, request;
        this.task.save({
          name: 'new task name',
          estimation: 1
        });
        request = this.server.requests[0];
        params = JSON.parse(request.requestBody);
        expect(params.task).toBeDefined();
        expect(params.task.name).toEqual('new task name');
        expect(params.task.complete).toBeFalsy();
        return expect(params.task.estimation).toEqual(1);
      });
      describe('server requests', function() {
        describe('on create', function() {
          beforeEach(function() {
            var new_task;
            new_task = new PomoJS.Models.Task();
            new_task.save();
            return this.request = this.server.requests[0];
          });
          it('should be POST', function() {
            return expect(this.request.method).toEqual('POST');
          });
          return it('should have /tasks as url', function() {
            return expect(this.request.url).toEqual('/tasks');
          });
        });
        return describe('on update', function() {
          beforeEach(function() {
            this.task.save({
              id: 13
            });
            return this.request = this.server.requests[0];
          });
          it('should be PUT', function() {
            return expect(this.request.method).toEqual('PUT');
          });
          return it('should have /tasks/13 as url', function() {
            return expect(this.request.url).toEqual('/tasks/13');
          });
        });
      });
      it("won't save with negative id", function() {
        this.task.set({
          id: -1
        });
        return expect(this.task.isValid()).toBeFalsy();
      });
      return it("won't save with negative estimation", function() {
        this.task.set({
          estimation: -2
        });
        return expect(this.task.isValid()).toBeFalsy();
      });
    });
  });

}).call(this);
