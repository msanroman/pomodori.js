// Generated by CoffeeScript 1.3.1
(function() {

  Backbone.history.start({
    silent: true,
    pushState: true
  });

  describe('PomoJS.Collections.TaskList', function() {
    beforeEach(function() {
      return this.taskList = new PomoJS.Collections.TaskList();
    });
    it('should exist', function() {
      return expect(PomoJS.Collections.TaskList).toBeDefined();
    });
    it('should be instantiable', function() {
      var list;
      list = new PomoJS.Collections.TaskList();
      return expect(list).not.toBeNull();
    });
    return describe('#fetch', function() {
      beforeEach(function() {
        return this.server = sinon.fakeServer.create();
      });
      afterEach(function() {
        return this.server.restore();
      });
      it('should have a request URL equal to /tasks', function() {
        this.taskList.fetch();
        return expect(this.server.requests[0].url).toEqual('/tasks');
      });
      return describe('TaskList should parse fetch response and return a Task collection', function() {
        var taskResponse;
        taskResponse = {
          tasks: [
            {
              id: 1,
              name: "Write blog entry",
              completed: false,
              estimation: 3
            }, {
              id: 2,
              name: "Rule the world",
              completed: true,
              estimation: 2
            }
          ]
        };
        beforeEach(function() {
          this.server.respondWith('GET', '/tasks', [
            200, {
              "Content-type": "application/json"
            }, JSON.stringify(taskResponse)
          ]);
          this.taskList.fetch();
          return this.server.respond();
        });
        it('loads all tasks from the response', function() {
          return expect(this.taskList.models.length).toEqual(2);
        });
        return it('parses all tasks from the response into Task objects', function() {
          var task;
          task = this.taskList.get(2);
          expect(task.getName()).toEqual("Rule the world");
          expect(task.isCompleted()).toBeTruthy();
          return expect(task.getEstimation()).toEqual(2);
        });
      });
    });
  });

}).call(this);
